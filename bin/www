#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cooperation:server');
const http = require("http");
var io = require('socket.io')(http); // socket 객체 : io

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// connection을 수립하고, callback 인자로 socket을 받음
io.on('connection', function (socket) {
  // 연결이 성공했을 경우 실행됨
  let name  = "unknown"

  socket.on('disconnect', function () {
    // 클라이언트의 연결이 끊어졌을 경우 실행됨
    io.to(roomNum).emit('chat', `${name}님이 퇴장 하셨습니다.` ); 
  });

  /**
   * "body": {
   *  "roomNum": 0,
   *  "name": "name"
   * }
   */
  socket.on('joinRoom', (body) => {
    socket.join(`${body.roomNum}`)
    name = body.name
    io.to(`${roomNum}`).emit('chat', `${name}님이 입장 하셨습니다.` ); 
  })

  /**
   * "body": {
   *  "roomNum": 0,
   *  "msg": "name"
   * }
   */
  socket.on('chat', (body) => {
    console.log('수신한 메시지:', msg);
    // 클라이언트들에게 메시지 전송
    io.to(`${roomNum}`).emit('chat', `${body.msg}` ); 
  });
});